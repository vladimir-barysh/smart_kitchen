@startuml

class ActionConstants{
    +MAKE_COFFEE: String
    +BOIL_WATER: String
    +HEAT_STOVE: String
    +HEAT_OVEN: String
    +CHECK_PRODUCTS: String
}

class CentralController {
    -devices: List<Device>
      -checker: Checker
      -schedule: ScheduleManager
      -receipt: Receipt
      -deviceHistory: Map<Device, List<CoffeeMachineMemento>>
      -observers: List<Observer>
      +addDevice(device: Device)
      +updateDeviceStatus(device: Device)
      +saveDeviceState(device: Device)
      +restoreDeviceState(device: Device, historyIndex: int)
      +executeSchedule(currentTime: String)
}

interface Checker {
    +checkAvailability()
    +reportStatus()
}

class CoffeeMachine {
    -type: String
    -isOn: boolean
    -int: waterLevel
    -int: coffeeLevel
    +getStatus()
    +getType()
    +turnOn()
    +turnOff()
    +makeCoffee()
    +setState(state: DeviceState)
    +getWaterLevel()
    +getCoffeeLevel()
    +createMemento()
    +restoreMemento()
}

class CoffeeMachineMemento {
  -waterLevel: int
  -coffeeLevel: int
  -state: DeviceState
  +getWaterLevel()
  +getCoffeeLevel()
  +getState()
}

interface Device {
    +getStatus()
    +turnOn()
    +turnOff()
    +getType()
    +makeCoffee()
    +createMemento()
    +restoreMemento()
}

class DeviceChecker {
    -controller: CentralController
    +setController(CentralController controller)
    +checkAvailability()
    +reportStatus()
    +parseValue()
}

interface DeviceState {
  +getStatus(Device context)
  +turnOn(Device context, CentralController controller)
  +turnOff(Device context, CentralController controller)
  +makeCoffee(Device context, CentralController controller)
}

interface DeviceIterator {
    +hasNext()
    +next()
}

class DeviceListIterator {
    -devices: List<ProxyDevice>
    -currentIndex: int
    +hasNext()
    +next()
}

interface Observer {
  +update(Device device)
}

class ProxyDevice {
    -realDevice: Device
    -cachedStatus: String
    +getStatus()
    +getType()
    +turnOn()
    +turnOff()
    +makeCoffee()
    +createMemento()
    +restoreMemento()
}

class Receipt {
    -devices: Map<String, ProxyDevice>
    +addDevice(device: ProxyDevice)
    +makeCoffee()
}

interface ScheduleInterface {
    +setSchedule()
    +getSchedule()
    +releaseTask(Task task)
}

class ScheduleManager {
    -tasks: List<Task>
    +setSchedule()
    +getSchedule()
    +releaseTask(Task task)
}

interface Subject {
  +addObserver(Observer observer)
  +removeObserver(Observer observer)
  +notifyObservers(Device device)
}

class Task {
    -time: String
    -taskType: TaskType
    -temperature: int
    -minutes: int
    +getTime()
    +getAction()
    +execute(controller: CentralController, receipt: Receipt)
}

class OffState {
}
class OnState {
}
class ErrorState {
  -errorMessage: String
}

Device <|.. CoffeeMachine
Device <|.. ProxyDevice
DeviceState <|.. OffState
DeviceState <|.. OnState
DeviceState <|.. ErrorState
Subject <|.. CentralController
Observer <|.. Checker
Checker <|.. DeviceChecker

CoffeeMachine o--> DeviceState
CoffeeMachine --> CoffeeMachineMemento
ProxyDevice -->  Device
DeviceIterator <|.. DeviceListIterator

CentralController o--> Device
CentralController o--> Checker
CentralController o--> ScheduleManager
CentralController o--> Receipt
CentralController o--> Observer
CentralController --> Device
CentralController --> CoffeeMachineMemento
CentralController --> DeviceIterator

DeviceChecker o--> Device
Receipt o--> Device
ScheduleInterface <|.. ScheduleManager
ScheduleManager o-->Task

Task --> CentralController
Task --> Receipt
@enduml