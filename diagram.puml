@startuml

class ActionConstants{
    +MAKE_COFFEE: String
    +BOIL_WATER: String
    +HEAT_STOVE: String
    +HEAT_OVEN: String
    +CHECK_PRODUCTS: String
}

class CentralController {
    -devices: List<DeviceProxy>
    -checker: Checker
    -schedule: ScheduleInterface
    -receipt: Receipt
    +addDevice(device: ProxyDevice)
    +getDevices()
    +checkDevices()
    +executeSchedule()
    +sendAlert()
}

interface Checker {
    +checkAvailability()
    +reportStatus()
}

class CoffeeMachine {
    -type: String
    -isOn: boolean
    -int: waterLevel
    -int: coffeeLevel
    +getStatus()
    +getType()
    +turnOn()
    +turnOff()
    +makeCoffee()
    +reportIssues()
}

interface Device {
    +getStatus()
    +turnOn()
    +turnOff()
    +getType()
    +makeCoffee()
    +boilWater()
    +heatStove(int temperature)
    +heatOven(int temperature, int minutes)
    +checkProducts()
    +reportIssues()
}

class DeviceChecker {
    -controller: CentralController
    +setController(CentralController controller)
    +checkAvailability()
    +reportStatus()
    +parseValue()
}

interface DeviceIterator {
    +hasNext()
    +next()
}

class DeviceListIterator {
    -devices: List<ProxyDevice>
    -currentIndex: int
    +hasNext()
    +next()
}

class Fridge {
    -type: String
    -isOn: boolean
    +milk: int
    +eggs: int
    +getStatus()
    +getType()
    +turnOn()
    +turnOff()
    +checkProducts()
    +reportIssues()
}

class Kettle {
    -type: String
    -isOn: boolean
    -waterLevel: int
    +getStatus()
    +getType()
    +turnOn()
    +turnOff()
    +boilWater()
    +reportIssues()
}

class Oven {
    -type: String
    -isOn: boolean
    -currentTemperature: int
    -remainingMinutes: int
    +getStatus()
    +getType()
    +turnOn()
    +turnOff()
    +heatOven(int temperature, int minutes)
    +reportIssues()
}

class ProxyDevice {
    -realDevice: Device
    -cachedStatus: String
    +getStatus()
    +getType()
    +turnOn()
    +turnOff()
    +makeCoffee()
    +boilWater()
    +heatStove(int temperature)
    +heatOven(int temperature, int minutes)
    +checkProducts()
    +reportIssues()
}

class Receipt {
    -devices: Map<String, ProxyDevice>
    +addDevice(device: ProxyDevice)
    +makeCoffee()
    +boilWater()
    +heatStove(int temperature)
    +heatOven(int temperature, int minutes)
    +checkProducts()
}

interface ScheduleInterface {
    +setSchedule()
    +getSchedule()
}

class ScheduleManager {
    -tasks: List<Task>
    +setSchedule()
    +getSchedule()
}

class SmartKitchenFacade {
  -controller: CentralController
  -schedule: ScheduleInterface
  -receipt: Receipt
  -checker: DeviceChecker
  +initializeSystem(Device device)
  +setupDailyRoutine()
  +startDay(String currTime)
  +checkSystemStatus()
}

class Stove {
    -type: String
    -isOn: boolean
    -currentTemperature: int
    +getStatus()
    +getType()
    +turnOn()
    +turnOff()
    +heatStove(int temperature)
    +reportIssues()
}

class Task {
    -time: String
    -taskType: TaskType
    -temperature: int
    -minutes: int
    +getTime()
    +getAction()
    +execute(Receipt receipt)
}

class TaskType {
    -action: String
    +TaskType(String action)
    +getAction()
}

class TaskTypeFactory {
  -taskTypes: Map<String, TaskType>
  +getTaskType(String action)
  +getTaskTypeCount()
}

Device <|.. CoffeeMachine
Device <|.. Kettle
Device <|.. Stove
Device <|.. Oven
Device <|.. Fridge
Device <|.. ProxyDevice

ProxyDevice o--> Device : realDevice

ScheduleInterface <|.. ScheduleManager
Checker <|.. DeviceChecker
DeviceIterator <|.. DeviceListIterator

Task o--> TaskType
TaskTypeFactory o--> TaskType

CentralController o--> ProxyDevice
CentralController o--> Checker
CentralController o--> ScheduleInterface
CentralController o--> Receipt
CentralController --> DeviceIterator

Receipt o--> ProxyDevice
ScheduleManager o--> Task
DeviceChecker --> CentralController

SmartKitchenFacade o--> CentralController
SmartKitchenFacade o--> ScheduleInterface
SmartKitchenFacade o--> Receipt
SmartKitchenFacade o--> DeviceChecker

@enduml